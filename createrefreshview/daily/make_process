一、Demo的作用

使用已知的方法，自制ListView+刷新的效果。
掌握：事件的拦截，ScrollView的使用，与弹性滑动的逻辑。

二、第一种Refresh控件的制作

名字:取名为RefreshLayout。

作用：作为其他可滑动控件的外围刷新封装

原理：创建ViewGroup，并在ViewGroup中初始化两个控件，HeaderView与ListView。
之后对滑动事件进行拦截。如果ListView在头部，并且为下滑，则将事件交给ViewGroup
显示HeaderView，在显示HeaderView的过程中，又有四个过程，判断当前是否刷新，准备刷新
，正在刷新，完成刷新。并通过ScrollView实现动画。如果ListView不在头部，则继续将焦点交给ViewGroup。

步骤：
1、创建ViewGroup，制作刷新用的HeaderView的layout,并加入到ViewGroup中。

2、代码中初始化HeaderView，并将Layout设置为继承类，允许其匹配内容滑动控件。
将HeaderView和内容滑动控件添加到ViewGroup中。

3、设置ViewGroup的measure
（不用设置，采用默认的方式）
错误：ViewGroup的onMeasure()没有自动调用measureChildren()(大小测量包括padding)方法。
导致其内部View的大小无法确定。

知识点：    正确：重写onMeasure()方法，测量子View的大小。

4、设置ViewGroup的layout，采用竖直布局

到这里测试，遇到的问题：headerView的大小设置的问题。
原因是在onLayout()中， child.layout(0,top,0+child.getMeasuredWidth(),top+child.getMeasuredHeight());
最后一个参数,bottom，本应该是top+child.getMeasuredHeight()，设置成了top+child.getMeasuredWidth();
也就是将高度设置成了宽度。导致的大小问题。

知识点：从中复习到了measure与layout的关系。
measure()是用来告诉子类只有这么大的空间给你用。这个空间其实只对match_parent有用。如果设置成具体数值的话，不受限制
空间的约束。如果父类有多余空间(指的除该子View占用的空间还有未被利用的空间)则子View超出的显示会覆盖到父类的多余空间上。
如果父类没有多余的空间，则子View超出的部分，就会显示不出来。

其实子View在显示板上显示的大小是根据layout设定的，measure的作用是确定子View本质的大小（也就是getMeasureHeight）。
如果layout自行给子View定义一个大小，不按照measure推算的本质大小来，那么显示的效果同上面解释的。之后造成的问题是
getTop()、getLeft()的大小还有getWidth()是按照layout来的(因为这些参数，是当onLayout()方法，完成后设定的)，
与其本质大小getMeasureWidth()不同，会造成混乱。

5、首先隐藏HeaderView。然后制作当ListView中的item为0且手指向下滑动的时候，拉动HeaderView向下。且当HeaderView
完全出现的时候停止滑动

小型步骤：

（1）、首先通过ListView的状态，及滑动的手势，判断ViewGroup是否拦截监听，
      成功监听之后对HeaderView滑动,并当HeaderView显示的时候完成滑动。

（2）、当HeaderView显示在一半以上的时候，弹性扩展或者收缩，并实现刷新监听。

6、增加刷新时候的动画

7、当正在刷新的时候，允许headerView被隐藏，但刷新效果不变。

